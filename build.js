const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

// Configure dotenv to read from .env file
require('dotenv').config();

// --- 1. Generate Password Hash ---

const adminPassword = process.env.ADMIN_PASSWORD;
if (!adminPassword) {
    console.error("Build failed: ADMIN_PASSWORD is not defined in your .env file.");
    process.exit(1);
}

// Create a SHA256 hash of the password. This must match the logic in auth.js.
const passwordHash = crypto.createHash('sha256').update(adminPassword).digest('hex');

// Create the config.js file content
const configJsContent = `// This file is auto-generated by the build script. Do not edit.
window.config = {
    ADMIN_PASSWORD_HASH: '${passwordHash}'
};
`;

// Write the config.js file
const configPath = path.join(__dirname, 'config.js');
fs.writeFileSync(configPath, configJsContent);
console.log(`Successfully created config.js with a new password hash.`);


// --- 2. Inject TinyMCE API Key ---

const tinymceApiKey = process.env.TINYMCE_API_KEY;
if (!tinymceApiKey) {
    console.warn("Warning: TINYMCE_API_KEY is not defined in .env. The rich text editor may not work.");
}

const adminHtmlPath = path.join(__dirname, 'admin.html');
try {
    let adminHtmlContent = fs.readFileSync(adminHtmlPath, 'utf8');

    if (adminHtmlContent.includes('TINYMCE_API_KEY_PLACEHOLDER')) {
        adminHtmlContent = adminHtmlContent.replace('TINYMCE_API_KEY_PLACEHOLDER', tinymceApiKey || 'no-api-key');
        fs.writeFileSync(adminHtmlPath, adminHtmlContent);
        console.log(`Successfully injected TinyMCE API key into admin.html.`);
    } else {
        console.log(`TinyMCE API key placeholder not found in admin.html, skipping injection.`);
    }
} catch (error) {
    console.error(`Error processing admin.html: ${error.message}`);
    process.exit(1);
}

console.log("Build process completed successfully.");
