const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

// Configure dotenv to read from .env file
require('dotenv').config();

// --- 1. Generate Password Hash and Create config.js ---

const adminPassword = process.env.ADMIN_PASSWORD;
if (!adminPassword) {
    console.error("Build failed: ADMIN_PASSWORD is not defined in your .env file.");
    process.exit(1);
}

// Create a SHA256 hash of the password. This must match the logic in auth.js.
const passwordHash = crypto.createHash('sha256').update(adminPassword).digest('hex');

const configJsContent = `// This file is auto-generated by the build script. Do not edit.
window.config = {
    ADMIN_PASSWORD_HASH: '${passwordHash}'
};
`;

const configPath = path.join(__dirname, 'config.js');
fs.writeFileSync(configPath, configJsContent);
console.log(`Successfully created config.js`);


// --- 2. Create admin.html from Template ---

const tinymceApiKey = process.env.TINYMCE_API_KEY;
if (!tinymceApiKey) {
    console.warn("Warning: TINYMCE_API_KEY is not defined in .env. The rich text editor may not work.");
}

const templatePath = path.join(__dirname, 'admin.template.html');
const adminHtmlPath = path.join(__dirname, 'admin.html');

try {
    let templateContent = fs.readFileSync(templatePath, 'utf8');

    // Replace the placeholder with the actual API key
    const finalHtml = templateContent.replace('TINYMCE_API_KEY_PLACEHOLDER', tinymceApiKey || 'no-api-key');

    fs.writeFileSync(adminHtmlPath, finalHtml);
    console.log(`Successfully created admin.html from template.`);
} catch (error) {
    console.error(`Error processing admin template: ${error.message}`);
    process.exit(1);
}

console.log("Build process completed successfully.");
